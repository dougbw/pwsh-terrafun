trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md

variables:
  version_major: 1
  version_minor: 4
  version_patch: $[counter(variables['version_minor'], 0)]

name: $(Rev:r)

pool:
  vmImage: ubuntu-latest

stages:

- stage: Test
  jobs:

  - job: Test
    displayName: Run tests
    pool:
      vmImage: $(imageName)
    strategy:
      matrix:
        linux-core:
          name: linux-core
          imageName: 'ubuntu-latest'
          edition: pwsh-core
        macos-core:
          name: macos-core
          imageName: 'macOS-latest'
          edition: pwsh-core
        windows-core:
          name: windows-core
          imageName: 'windows-latest'
          edition: pwsh-core
        windows-powershell:
          name: windows-powershell
          imageName: 'windows-latest'
          edition: powershell
  
    steps:

    - task: PowerShell@2
      displayName: Run pester tests
      name: tests
      inputs: 
        targetType: filePath
        filePath: $(build.sourcesDirectory)/Scripts/Start-Tests.ps1
        pwsh: $[ eq(variables.edition, 'pwsh-core') ]
        workingDirectory: $(build.sourcesDirectory)
        failOnStderr: true

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'Nunit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: testResults.xml
        searchFolder: $(build.sourcesDirectory)
        failTaskOnFailedTests: false # Optional
        testRunTitle: $(imageName)-$(edition)
      
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: ./coverage.xml
        artifactName: coverage-$(name)

  - job: MergeCodeCoverage
    dependsOn: Test
    displayName: Merge code coverage reports
  
    steps:

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'coverage-linux-core'
        path: $(build.sourcesDirectory)/report-generator/linux-core

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'coverage-macos-core'
        path: $(build.sourcesDirectory)/report-generator/macos-core

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'coverage-windows-core'
        path: $(build.sourcesDirectory)/report-generator/windows-core

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'coverage-windows-powershell'
        path: $(build.sourcesDirectory)/report-generator/windows-powershell

    - task: PowerShell@2
      displayName: Run report generator
      name: ReportGenerator
      inputs: 
        targetType: filePath
        filePath: $(build.sourcesDirectory)/Scripts/Start-ReportGenerator.ps1
        pwsh: true
        workingDirectory: $(build.sourcesDirectory)/report-generator
        failOnStderr: true
  
    - task: PublishCodeCoverageResults@1
      condition: always()
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: './report-generator/coveragereport/Cobertura.xml'
        pathToSources: $(build.sourcesDirectory)/Terrafun

- stage: Publish
  variables:
  - group: pwsh-gallery
  jobs:
  - job: Publish
    steps:
    - pwsh: |
        Write-Output $env:BUILD_BUILDNUMBER
        $ver = "{0}.{1}.{2}" -f $env:VERSION_MAJOR, $env:VERSION_MINOR, $env:VERSION_PATCH
        Write-Output ("release version: {0}" -f $ver)
        Update-ModuleManifest -Path ./Terrafun/Terrafun.psd1 -ModuleVersion $ver
        Publish-Module -Name ./Terrafun -NuGetApiKey ${env:PSGALLERYAPIKEY}
      displayName: Publish to powershell gallery
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      name: publish
      workingDirectory: $(build.sourcesDirectory)
      failOnStderr: true
      env:
        PSGALLERYAPIKEY: $(psgalleryapikey)


